#!groovy
def awsCredentials = [[$class: 'AmazonWebServicesCredentialsBinding',
                       credentialsId: 'DPRC_AWS_CREDS']]


pipeline {
    environment {
        AWS_REGION = 'us-west-2'
    }
    agent none
    triggers {
        githubPush()
    }
    stages {

        stage('Clear Workspace') {
            agent any
            steps {


                sh '''
                    sudo chown -R jenkins:jenkins /var/lib/jenkins/workspace

                    cd /var/lib/jenkins/workspace/amp-dev-build-pipeline
                    pwd
                    sudo -u jenkins rm -rf *
                  '''
            }

        }


        stage('Fetch Backend') {
            agent any
            steps {

                checkout([

                        $class: 'GitSCM',
                        branches: [[name: 'refs/heads/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'workspace/backend']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'GitHubAccessToken', url: 'https://github.com/Fontaineconsult/accessiblebookchecker/']]
                ])

            }
        }
        stage('Fetch Frontend') {
            agent any
            steps {

                checkout([

                        $class: 'GitSCM',
                        branches: [[name: 'refs/heads/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'workspace/frontend']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'GitHubAccessToken', url: 'https://github.com/Fontaineconsult/Captioning_Frontend']]
                ])
            }
        }

        stage('Build Node Front End') {

            agent {
                docker {
                    image 'node:12'
                    args '-u root:root'
                }
            }
            steps {

                sh '''

                    cd workspace/frontend
                    npm install
                    npm update
                    npm run build --no-cache
                    ls
                   '''
            }

        }



        stage('Copy Build Files') {
            agent any
            steps {
                sh '''
                    sudo chown -R jenkins:jenkins /var/lib/jenkins/workspace
                    ls workspace/backend/root/application/flask_site/pages/static/
                    mkdir workspace/backend/root/application/flask_site/pages/static/react
                    mkdir workspace/backend/root/application/flask_site/pages/static/react/static
                    mkdir workspace/backend/root/application/flask_site/pages/static/react/static/css
                    mkdir workspace/backend/root/application/flask_site/pages/static/react/static/js
                    ls workspace/backend/root/application/flask_site/pages/static/
                    sudo -u jenkins mv workspace/frontend/build/index.html workspace/backend/root/application/flask_site/pages/templates/
                    sudo -u jenkins mv workspace/frontend/build/static/css/* workspace/backend/root/application/flask_site/pages/static/react/static/css/
                    sudo -u jenkins mv workspace/frontend/build/static/js/* workspace/backend/root/application/flask_site/pages/static/react/static/js/
                    ls workspace/backend/root/application/flask_site/pages/static/react/
                    ls workspace/backend/root/application/flask_site/pages/static/react/static/css
                    ls workspace/backend/root/application/flask_site/pages/static/react/static/js
                  '''
            }
        }
        stage('Build Docker Website Image') {
            agent any
            steps {
                sh '''
                    cd workspace/backend
                    ls
                    dos2unix root/Dockerfile
                    dos2unix root/deployment/docker/celeryd.conf
                    cd root/
                    docker build -t amp-dev .
                  '''
            }
        }


        stage('Run Docker Website Image') {
            agent any
            steps {
                sh '''

                    redis-server --daemonize yes
                    ls workspace/root/backend/deployment/docker/
                    docker stop $(docker ps -aq)
                    docker run -d -it --net=host --env-file workspace/root/backend/deployment/docker/env.list -v /home/ubuntu/sharedlogs:/var/www/sharedlogs amp-dev:latest
                    docker rmi $(docker images -f dangling=true -q) --force
                    docker system prune -a -f
                     

                  '''

            }
        }



    }


}

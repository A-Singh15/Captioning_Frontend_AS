#!groovy
def awsCredentials = [[$class: 'AmazonWebServicesCredentialsBinding',
                       credentialsId: 'DPRC_AWS_CREDS']]

pipeline {
    environment {
        AWS_REGION = 'us-west-2'
    }
    agent none
    triggers {
        githubPush()
    }
    stages {

        stage('Clear Workspace') {
            agent any
            steps {

                sh '''
                    cd /var/lib/jenkins/workspace/amp-dev-build-pipeline
                    pwd
                    rm -rf *
                  '''

            }

        }

        stage('Fetch Backend') {
            agent any
            steps {

                checkout([

                        $class: 'GitSCM',
                        branches: [[name: 'refs/heads/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'workspace/backend']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'githubaccount', url: 'https://github.com/Fontaineconsult/accessiblebookchecker']]
                ])



            }
        }
        stage('Fetch Frontend') {
            agent any
            steps {


                checkout([

                        $class: 'GitSCM',
                        branches: [[name: 'refs/heads/master']],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'workspace/frontend']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'githubaccount', url: 'https://github.com/Fontaineconsult/Captioning_Frontend']]
                ])

            }
        }

        stage('Build Node Front End') {

            agent {
                docker {
                    image 'node:latest'
                    args '-u root:root'
                }
            }
            steps {

                sh '''
                    cd workspace/frontend
                    npm install
                    npm run build
                    ls
                   '''

            }

        }



        stage('Copy Build Files') {
            agent any
            steps {
                sh '''
                    ls workspace/backend/application/flask_site/pages/static/
                    mkdir workspace/backend/application/flask_site/pages/static/react
                    mkdir workspace/backend/application/flask_site/pages/static/react/static
                    mkdir workspace/backend/application/flask_site/pages/static/react/static/css
                    mkdir workspace/backend/application/flask_site/pages/static/react/static/js
                    ls workspace/backend/application/flask_site/pages/static/
                    mv workspace/frontend/build/index.html workspace/backend/application/flask_site/pages/templates/
                    mv workspace/frontend/build/static/css/* workspace/backend/application/flask_site/pages/static/react/static/css/
                    mv workspace/frontend/build/static/js/* workspace/backend/application/flask_site/pages/static/react/static/js/
                    ls workspace/backend/application/flask_site/pages/static/react/
                    ls workspace/backend/application/flask_site/pages/static/react/static/css
                    ls workspace/backend/application/flask_site/pages/static/react/static/js
                  '''

            }
        }
        stage('Build Docker Image') {
            agent any
            steps {
                sh '''
                    cd workspace/backend
                    docker build -t amp-dev .
                  '''

            }
        }
        stage('Run Docker Image') {
            agent any
            steps {
                sh '''
                    ls workspace/backend/deployment/docker/
                    docker stop $(docker ps -aq)
                    docker run -d -it --net=host --env-file workspace/backend/deployment/docker/env.list amp-dev:latest
                    docker rmi $(docker images -f dangling=true -q) --force
                  '''

            }
        }
    }


}

